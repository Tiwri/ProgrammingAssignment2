install.packages("KernSmooth")
library(KernSmooth)
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
library(devtools)
find_rtools()
devtools
packageName(devtools)
exit
logout
y <- data.frame(a=1,b="a")
dput(y)
dput(y, file="y.R")
new.y <- dget("y.R")
ney.y
new.y
con <- url("https://www.google.co.in","r")
x <- readLines(con)
x
head(x)
con.close()
close(con)
con <- url("https://www.facebook.com","r")
x <- readLines(con)
con <- url("http://www.facebook.com","r")
x <- readLines(con)
head(x)
close(con)
ls
x <- list(a= list (10,12,14), b = c(3.14, 2.81))
x <- list(a= list (10,12,14), b = c(3.14, 2.81))
x[c(1,3)]
x[c(1,2)]
x[[c(1,2)]
x[[c(1,2)]]
x[[c(2,2)]]
x[1
x[1]
x[[1]]
x[[1][3]]
x[[1]][[3]]
exit
logout
exists(x)
exit
x <- list(a=1:5, b=rnorm(10))
lapply(x,mean)
x <- matrix(rnorm(200),20,10)
apply (x,2,mean)
x
x <- matrix(1:4,2,2)
x
apply (x,2,mean)
apply (x,1,mean)
apply (x,1,sum)
apply (x,2,sum)
apply (x,1,quantile,probs=c(0.25,0.50))
x
a <- array(rnorm(2*2*10),c(2,2,10))
apply(a,c(1,2),mean)
apply(a,c(1,2),sum)
a
library(datasets)
head(airquality)
s <- split(airquality,airquality$Month)
s
airquality
s
lapply (s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply (s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")]))
sapply (s,function(x) colMeans(x[,c("Ozone","Solar.R","Wind")],na.rm = TRUE))
x <- rnorm(10)
x
?gl
f1 <- gl(2,5)
f1
f1 <- gl(5,2)
f1 <- gl(2,5)
f1
f2 <- gl(5,2)
f2
interaction(f1,f2)
list(f1,f2)
str(split(x, list(f1,f2)))
x
str(split(x, list(f1,f2), drop=TRUE))
log(-1)
printmessage <- function(x){}
printmessage <- function(x){}
printmessage <- function(x){if (x>0)
print("greater") }
printmessage <- function(x){if (x>0)
print("greater")
else
print("less")
invisible(x)
}
printmessage(0)
printmessage(1)
val <- printmessage(0)
val
val <- printmessage(1)
val
val <- printmessage(NA)
x
va;
val
val
mean ()x
mean (x)
mean (z)
traceback
traceback(0)
traceback()
con <- url("https://www.facebook.com","r")
con
traceback()
mean (x)
traceback()
lm (y-x)
lm (y-z)
lm (y - z)
lm (d - z)
traceback()
debug(lm)
lm (d - z)
exit
options(error = recover)
read.csv("error")
library(swirl)
ls()
list=ls()
list
rm(list=ls())
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,6,6))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply (flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply (flags,unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags,class)
vapply(flags, class, character(1))
?tapply
landmass
class(landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
swirl
swirl()
library(swirl)
list
list()
list
list=ls()
list
exit
Q
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ls()
m <- matrix(c(1,2,3,4),2,2)
m
solve(m)
>sole
?solve
getwd()
setwd("E:/Project/coursera")
setwd("E:/Projects/coursera")
getwd()
file.info()
dir()
ls()
file()
setwd("Assignments")
dir()
setwd("ProgrammingAssignment2")
getwd()
dir()
cat cachematrix.R
m <- matrix(c(1,2,3,4),2,2)
Mat <- matrix(c(1,2,3,4),2,2)
Mat
solve(Mat)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function (y){
x <<- y
m <<- NULL
}
get <- function(){
x
}
setInverse <- function(inverse){
m <<- inverse
}
getInverse <- function(){
m
}
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
message("Getting Cached Matrix")
message ("Getting Cached Matrix")
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(x)){
message ("Getting Cached Matrix")
return(x)
}
data <- x$get()
m <- solve(data)
x$setInverse(m)
m
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
message ("Getting Cached Matrix")
cacheSolve(B1)
return(x)
if(!is.null(x)){
message ("Getting Cached Matrix")
return(x)
}
x$setInverse(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function (y){
x <<- y
m <<- NULL
}
get <- function(){
x
}
setInverse <- function(inverse){
m <<- inverse
}
getInverse <- function(){
m
}
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)){
message ("Getting Cached Matrix")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setInverse(m)
m
}
cacheSolve(B1)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function (y){
x <<- y
m <<- NULL
}
get <- function(){
x
}
setInverse <- function(inverse){
m <<- inverse
}
getInverse <- function(){
m
}
list(set=set,get=get,setInverse=setInverse,getInverse=getInverse)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)){
message ("Getting Cached Matrix")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setInverse(m)
m
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
cacheSolve(B2)
cacheSolve(B)
cacheSolve(B1)
B <- matrix(c(1,2,5,8),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
Test <- matrix(c(1,2,3,4),2,2)
Test1 <- makeCacheMatrix(Test)
Test1
cacheSolve(Test1)
cacheSolve(Test1)
cacheSolve(Test1)
cacheSolve(Test1)
cacheSolve(Test1)
cacheSolve(B1)
A <- matrix(c(1,2,5,8),2,2)
A1 <- makeCacheMatrix(A)
cacheSolve(A)
cacheSolve(A1)
cacheSolve(A1)
